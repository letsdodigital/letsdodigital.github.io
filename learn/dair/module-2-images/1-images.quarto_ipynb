{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Core Python for Image Processing\" # \"{{< var dair-seminar-0 >}}\"\n",
        "author: \"DAIM - Images - Seminar 2\"\n",
        "format: revealjs\n",
        "logo: /media/ldd-logo.png\n",
        "---\n",
        "\n",
        "\n",
        "## Introduction\n",
        "\n",
        "* Welcome to the second seminar of the **DAIM - Images** course!\n",
        "* This seminar will introduce key concepts for image processing in Python.\n",
        "* This will prepare you for the first workshop of the course. \n",
        "\n",
        "## Learning outcomes\n",
        "\n",
        "* Recap general uses of image data in clinical settings\n",
        "* Understand the basics of digital image representation\n",
        "* Understand what an image transform is\n",
        "* Understand overviews of two key Python packages (PIL, NumPy)\n",
        "\n",
        "## What is meant by image processing?\n",
        "\n",
        "* This refers to **performing operations** on **an image** to **gain information** from it or improve its usefulness.\n",
        "* Digitally, an image is defined as a **2D grid of pixels**.\n",
        "    * These **pixels contain values** - we will go over the types of value that they usually contain\n",
        "* Remember, concepts that work for 2D images also translate down to 1D and up to 3D (and above!)\n",
        "    * This is important for **volumetric scans** (CT, MRI)\n",
        "\n",
        "## 5-minute open discussion {background-image=\"/media/daim/question1.png\" background-opacity=\"0.4\"}\n",
        "\n",
        "* How many clinical uses for images can we list?\n",
        "* Consider 3D images as well as conventional 2D images.\n",
        "\n",
        "## Clinical uses for images\n",
        "\n",
        "* Radiological applications (plain films, ultrasound)\n",
        "* Volumetric imaging (MRI, CT)\n",
        "* Medical photography\n",
        "* Spectrograms from time-varying signals (e.g. EEG)\n",
        "\n",
        "#\n",
        ":::{.r-stack}\n",
        "**Part 1 - How computers represent images**\n",
        ":::\n",
        "\n",
        "## What is a pixel?\n",
        "\n",
        "* A pixel (picture element) is an element on a grid which can take on different types of values.\n",
        "* The simplest value that a pixel can take on is an integer value between 0 and 255. \n",
        "    * These are used for shades of greyscale images\n",
        "\n",
        "![A greyscale pixel and the values it can take on, from black to white](/media/daim/greyscale_pixels.png)\n",
        "\n",
        "## Is a greyscale pixel always 0 to 255?\n",
        "\n",
        "* You will often seen this in floating-point format\n",
        "    * The numbers will be divided by 255 -> 0.0 to 1.0\n",
        "\n",
        "![A greyscale pixel with floating point values, from black to white](/media/daim/greyscale_pixels_float.png)\n",
        "\n",
        "## How about colour representation?\n",
        "\n",
        "* Pixels each need **3 values** (channels) to represent colour\n",
        "    * Red, green, and blue channels (**RGB**)\n",
        "    * The higher the number, the brighter the colour in the mix\n",
        "\n",
        "![Two different colours with the RGB values needed to generate them](/media/daim/rgb_pixels_decimal.png)\n",
        "\n",
        "## I've seen letters when describing colours?\n",
        "\n",
        "* Numbers can also be represented in hexadecimal (base-16)\n",
        "    * This assigns letters A-F for numbers 10-15\n",
        "\n",
        "![Two different colours with their hexadecimal RGB values](/media/daim/rgb_pixels_hexadecimal.png)\n",
        "\n",
        "## RGB Colour Codes\n",
        "\n",
        "* Using hexadecimal, colors can be elegantly expressed as strings of 6 letters. \n",
        "    * This is usually preceded by a **hash (#)**\n",
        "\n",
        "![The same colours with their RGB hex colour codes.](/media/daim/rgb_pixels_hexcode.png)\n",
        "\n",
        "<!--\n",
        "Perhaps mention alpha channels in this section\n",
        "-->\n",
        "\n",
        "## Other colour representations\n",
        "\n",
        "::: {.panel-tabset}\n",
        "\n",
        "### Representations\n",
        "\n",
        "* **Hue, saturation, value (HSV)**\n",
        "    * **Hue** - the colour represented\n",
        "    * **Saturation** - the intensity of the colour\n",
        "    * **Value** - how bright/dark the pixel is\n",
        "* **Colourmap**\n",
        "    * An **integer value** maps to a **specific colour**\n",
        "    * e.g. \"17\" = purple (`#A520F0`)\n",
        "\n",
        "### Demos\n",
        "\n",
        "* [**An interactive site**](https://hslpicker.com/#3fb53b) for getting to grips with HSV representation.\n",
        "\n",
        ":::\n",
        "\n",
        "## Image dimensions\n",
        "\n",
        "* The dimensions determine how many pixels are in an image.\n",
        "* In  a colour image, 3 values are needed for each pixel (R, G, and B)\n",
        "\n",
        "![A small image of a cat with the image's overall shape.](/media/daim/cat_dimension.png){width=\"60%\"}\n",
        "\n",
        "<!--\n",
        "Deliberately introducing this notation early (x,y,channels).\n",
        "-->\n",
        "\n",
        "## Test slide\n",
        "\n",
        "* hello\n"
      ],
      "id": "09adcb52"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "r = np.arange(0, 2, 0.01)\n",
        "theta = 2 * np.pi * r\n",
        "fig, ax = plt.subplots(subplot_kw={\"projection\": \"polar\"})\n",
        "ax.plot(theta, r)\n",
        "ax.set_rticks([0.5, 1, 1.5, 2])\n",
        "ax.grid(True)\n",
        "plt.show()"
      ],
      "id": "85898c41",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Second slidse\n",
        "\n",
        "* hello"
      ],
      "id": "330e96be"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/freddierenyard/Library/Python/3.9/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}