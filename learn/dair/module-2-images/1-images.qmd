---
title: "Core Python for Image Processing"
author: "DAIM Team"
format: revealjs
logo: /media/ldd-logo.png
css: /slides.css
title-slide-attributes: 
  data-background-image: /media/daim/bg_cubes_blue.png
  data-background-opacity: "0.6"
---

## Introduction {background-image="/media/daim/bg_cubes_blue.png" background-opacity="0.6"}

* Welcome to the second seminar of the **DAIM - Images** course!
* This seminar will introduce key concepts for image processing in Python.
* This will prepare you for the first workshop of the course. 

## Learning outcomes {background-image="/media/daim/bg_cubes_blue.png" background-opacity="0.6"}

* Recap general uses of image data in clinical settings
* Understand the basics of digital image representation
* Understand what an image transform is
* Understand overviews of two key Python packages (PIL, NumPy)

## What is meant by image processing? {background-image="/media/daim/bg_cubes_blue.png" background-opacity="0.6"}

* This refers to **performing operations** on **an image** to **gain information** from it or improve its usefulness.
* Digitally, an image is defined as a **2D grid of pixels**.
    * These **pixels contain values** - we will go over the types of value that they usually contain
* Remember, concepts that work for 2D images also translate down to 1D and up to 3D (and above!)
    * This is important for **volumetric scans** (CT, MRI)

## 5-minute open discussion {background-image="/media/daim/question1.png" background-opacity="0.4"}

* How many clinical uses for images can we list?
* Consider 3D images as well as conventional 2D images.

## Clinical uses for images {background-image="/media/daim/bg_cubes_red_right.png" background-opacity="0.4"}

* Radiological applications (plain films, ultrasound)
* Volumetric imaging (MRI, CT)
* Medical photography
* Spectrograms from time-varying signals (e.g. EEG)

#
:::{.r-stack}
**Part 1 - How computers represent images**
:::

## What is a pixel? 

* A pixel (picture element) is an element on a grid which can take on different types of values.
* The simplest value that a pixel can take on is an integer value between 0 and 255. 
    * These are used for shades of greyscale images

![A greyscale pixel and the values it can take on, from black to white](/media/daim/greyscale_pixels.png)

## Is a greyscale pixel always 0 to 255?

* You will often seen this in **floating-point format**
    * The numbers will be divided by 255 -> 0.0 to 1.0
* They can also be in **Houndsfield units (HU)**
    * We will discuss this in Module 3.

![A greyscale pixel with floating point values, from black to white](/media/daim/greyscale_pixels_float.png)

## How about colour representation?

* Pixels each need **3 values** (channels) to represent colour
    * Red, green, and blue channels (**RGB**)
    * The higher the number, the brighter the colour in the mix

![Two different colours with the RGB values needed to generate them](/media/daim/rgb_pixels_decimal.png)

## I've seen letters when describing colours?

* Numbers can also be represented in hexadecimal (base-16)
    * This assigns letters A-F for numbers 10-15

![Two different colours with their hexadecimal RGB values](/media/daim/rgb_pixels_hexadecimal.png)

## RGB Colour Codes

* Using hexadecimal, colors can be elegantly expressed as strings of 6 letters. 
    * This is usually preceded by a **hash (#)**

![The same colours with their RGB hex colour codes.](/media/daim/rgb_pixels_hexcode.png)

<!--
Perhaps mention alpha channels in this section
-->

## Image dimensions

* The dimensions determine how many pixels are in an image.
* In  a colour image, 3 values are needed for each pixel (R, G, and B)

![A small image of a cat with the image's overall shape.](/media/daim/cat_dimension.png){width="60%"}

<!--
Deliberately introducing this notation early (x,y,channels).
-->

<!--
* If one byte is used for each colour in the image of the cat, the total storage needed would be:
    * `3 * 50 * 57 = 8550 bytes - 8.6kB`
* This is **already a large size** for a such a tiny image
* We can combat this with **compression algorithms**
-->

## How can we reduce the storage space of an image? {background-image="/media/daim/bg_cubes_blue_right.png" background-opacity="0.4"}

* Compression is the process of **reducing image storage requirements**
* There are lots of approaches to this process.
* These methods can be **lossy** or **lossless**

<!--
Specific compression algorithms (e.g. DCT) are outside the scope of the course.
-->

## Lossy versus lossless compression {background-image="/media/daim/bg_cubes_blue_right.png" background-opacity="0.4"}


::: {.panel-tabset}

### Representations

* **Lossless** compression indicates that all the data in the original image can be recovered
* **Lossy** compression will only produce an approximation of the original image 
* This is an important distinction!

### Example

![An example of an X-ray [from the dataset that we will use later in the course](https://www.kaggle.com/datasets/paultimothymooney/chest-xray-pneumonia/data), with lossless and (extreme) lossy compression](/media/daim/compression_comparison.png){width="70%"}

:::

## Break! {background-image="/media/daim/coffee1.png" background-opacity="0.6" text-align=center}

#
:::{.r-stack}
**Part 2 - What is convolution?**
:::

## What is convolution? {background-image="/media/daim/bg_cubes_red_right.png" background-opacity="0.4"}

* **Convolution** is a **common operation** that is used in data processing
* It involves **"convolving"** a target image with a **kernel**
* It can be done in **1D** (signals), **2D** (images), and higher dimensions.

## What does it do to an image? {background-image="/media/daim/bg_cubes_red_right.png" background-opacity="0.4"}

* The change that convolution has on an image **depends on a kernel**
* Kernels can be designed to produce **different effects**:
    * Blurring, sharpening, edge detection, etc.

## What is a kernel? {background-image="/media/daim/bg_cubes_red_right.png" background-opacity="0.4"}

* A kernel is a small grid of numbers that is used in convolution.
* The **structure** of the kernel affects the output.
* An **averaging kernel** is shown below in Python.

```python
kernel = (1.0 / 9.0) * [
    [1, 1, 1],
    [1, 1, 1],
    [1, 1, 1]
]
```

## Examples of convolution {background-image="/media/daim/bg_cubes_red_right.png" background-opacity="0.4"}

::: {.panel-tabset}

### Sharpening

::: {#fig-blur layout-ncol=3}

![Normal](/media/daim/normal_cat.png){#fig-norm}

![Blurred](/media/daim/sharp_cat.png){#fig-blur}

```python
kernel =[
    [-1, -1, -1],
    [-1, 9, -1],
    [-1, -1, -1]
]
```

A comparison of convolving an image of a cat with a sharpening kernel.

:::

### Blurring

::: {#fig-blur layout-ncol=3}

![Normal](/media/daim/normal_cat.png){#fig-norm}

![Blurred](/media/daim/blur_cat.png){#fig-blur}

```python
kernel = [
    [1, 2, 1],
    [2, 4, 2],
    [1, 2, 1]
]
kernel *= 1.0 / 16.0
```

A comparison of convolving an image of a cat with a blurring kernel (3x3 approximated Gaussian).

:::

### Edge detection

::: {#fig-blur layout-ncol=3}

![Normal](/media/daim/normal_cat.png){#fig-norm}

![Edges](/media/daim/sobel_cat.png){#fig-edge}

```python
kernel = [
    [-1, -2, -1],
    [0, 0, 0],
    [1, 2 ,1]
]
```

A comparison of convolving an image of a cat with a edge detection kernel (Sobel operator) in the y-axis (upwards/downwards) direction.

:::

:::

## Why feature convolution in this course? {background-image="/media/daim/bg_cubes_red_right.png" background-opacity="0.4"}

* Convolution is a key operation in a **convolutional neural network**, a **well-established deep-learning architecture** for analysing images
* It is also very versatile and is **used in other areas** (e.g. signal processing)

## 5-minute task or break! {background-image="/media/daim/coffee2.png" background-opacity="0.4"}

* What property do all of the `kernel` variables in the **convolution example slide** share?

<!--
Find a clinical example of convolution?
-->

#
:::{.r-stack}
**Part 3 - What is PIL?**
:::

## Python Imaging Library {background-image="/media/daim/bg_cubes_blue_right.png" background-opacity="0.4"}

* **Python Imaging Library (PIL)** is a commonly used library that contains useful methods for **opening and processing** images
* The most commonly used part of the package is the `Image` module.
    * Other modules contain methods for doing specific image operations, like **filtering** and **enhancement**

```python
from PIL import Image
```

#
:::{.r-stack}
**Part 4 - What is NumPy?**
:::

## NumPy {background-image="/media/daim/bg_cubes_blue_right.png" background-opacity="0.4"}


* **NumPy** is a Python package which is used for doing operations on **multidimensional arrays of numbers**
* This is how images are represented, and so NumPy contains lots of functions which are useful for manipulating images.

## How does array shape work?

* Arrays can be visualised as rectangular shapes of boxes, depicting the array elements

![Visualisations of the shape of some example NumPy arrays](/media/daim/np_shape_1.png){width="70%"}

## Similar shapes

* These shapes are the same, but the dimensions are structured differently, making the data incompatible for some operations

![Visualisation of the same data with different dimension structure](/media/daim/np_shape_2.png){width="70%"}

## How does this relate to images? {background-image="/media/daim/bg_cubes_blue_right.png" background-opacity="0.4"}

::: {.panel-tabset}

### Explanation

* Collections of images are often represented as NumPy arrays
* This is the input data format for many machine learning models
    * Data must be preprocessed into this format before training and testing
* The shapes of these arrays can be confusing.

### Example

![Visualisation of a NumPy array of cat images with the same resolution with its shape. Note the colour channels.](/media/daim/np_shape_cat.png){width="40%"}

:::

#
:::{.r-stack}
**Quiz questions - NumPy Representation**
:::

## Example 1 {background-image="/media/daim/bg_cubes_blue_right.png" background-opacity="0.4"}

::: {.panel-tabset}

### Question 

* A **greyscale image** of an ultrasound scan is opened in NumPy.
* It is a **square image** with a dimension of 50 pixels.
* What is its shape?

### Answer

```python
us_image_shape = (50, 50)

# Practically, greyscale images may have an extra channel when imported...
us_image_shape = (50, 50, 1)
```

:::

## Example 2 {background-image="/media/daim/bg_cubes_blue_right.png" background-opacity="0.4"}

::: {.panel-tabset}

### Question 

* A **colour image** of a dermatofibroma is opened by a dermatology researcher with NumPy.
* It is a **frame from a video sequence** with **1080p resolution**.
* What is the shape of the image?

### Answer

```python
# There are 3 channels for colour and the dimensions of
# 1080p video are 1920 x 1080.
derm_image_shape = (1920, 1080, 3)
```

:::

## Example 3 {background-image="/media/daim/bg_cubes_blue_right.png" background-opacity="0.4"}

::: {.panel-tabset}

### Question 

* A DAIM course participant is batching **multiple CXR images** together for input into a neural network.
* The images are **greyscale** and have been cropped to a **square** with a dimension of **256**.
* There are **16 images** in each batch.
* What is the shape of the **final batch** array?

### Answer

```python
# There are 16 images in each batch, and each
# image is 256 x 256.
cxr_batch_shape = (16, 256, 256)
```

:::


## Thank you! {background-image="/media/daim/bg_cubes_blue_right.png" background-opacity="0.4"}

Any questions?