---
title: "Python basics"
subtitle: Module 1
author: "{{< var author >}}"
format: revealjs
logo: /media/ldd-logo.png
css: /slides.css
title-slide-attributes:
    data-background-color: "#F6D499"
    data-background-image: /media/python-scales.jpg
---


## What are computers? {background-image="/media/yes-no-hands.jpg" background-opacity="0.3"}

* At its core, a computer is essentially a device that answers `yes-no questions`.
* It answers these simple questions very very quickly.
* By asking the computer millions of these yes-no questions, it can calculate answers to very complex questions.


## How do computers think? {.smaller background-image="/media/old-computer.jpg" background-opacity="0.3"}

* Confused by the last statement? Let me expand...
* Computers have lots of components to enable them to work. 
    * Screen to show you its output. 
    * Keyboard and mouse to allow you to communicate with the computer.
    * Inside the computer's chassis:
        * Hard drives
        * Memory sticks
        * Fans
        * Power supplies
        * Motherboards
        * Processors
* The processor of a computer is where all of the `thinking` takes place.


## How do computers think? {background-image="/media/old-computer.jpg" background-opacity="0.3"}

* The processor is where these `yes-no questions` are undertaken.
* The processor receives instructions in `binary` form. 
* Binary is basically a string of `1`s and `0`s (eg 01001011).
* As modern computers communicate in binary (yes-no) form, they are said to be `digital`.
* The processor reads these binary instructions.
* Each instruction results in either a `True` or `False` *answer* (aka `yes-no answer`). The `output` (aka *answer*) is also in binary.


## So how do we communicate with computers?{background-image="/media/digital-self.jpg" background-opacity="0.3"}

* So computers listen, think and talk in binary.
* We need a method to communicate with them, enabling us to get them to do what we want them to do.
* This is where programming languages come into play.


## Programming languages {.smaller background-image="/media/syntax-hard.jpg" background-opacity="0.2"}

* There are over 9000 programming languages, but much less than this in routine use.
* A programming language is written in *somewhat* of a human readable form (depends on the langauge).
* Popular langauges include:
    * Javascript / typescript
    * C++
    * Go
    * Java
    * Swift
    * R
    * Python


## Translation {background-image="/media/keyboard-of-flags.jpg" background-opacity="0.2"}

* When you have written your code in your favourite programming language, a software program (called the interpreter or compiler) reads your code and translates it into `1`s and `0`s which the computer can then read and act upon.

# <span style="font-size: smaller;">OK, so you can write some code. What do you put in the code? How do you tell the computer what to do?</span> {background-image="/media/barren-land.jpg" background-opacity="0.4"}


## We will be learning python

![](/media/python-logo.png){fig-align="center"}

## The Python programming language{background-image="/media/python-logo.png" background-opacity="0.3"}

* Python is a scripting language interpreted and compiled at runtime.
* Its syntax emphasises readability and simplicity, utilising indentation for code structuring.
* Python supports various programming paradigms, including procedural, object-oriented, and functional.
* With a vast standard library and active community support, Python is widely used for web development, data analysis, AI, and automation.


## What is in a code?

* You need different elements in your code to be able to tell the computer what to do. These include:
    * Variables
    * Operators
    * Expressions
    * Flow control
    * Functions
    * Error handling
    * More advanced functionalities


## Variables

* A single variable is a contained space in the computer's memory.
* Simple in-built variables include:

```{.python filename="variables_simple.py"}
a_string = "I am a string"
an_integer = 11
a_float = 8.04
a_boolean = True
```


## Variables

* More complex variables include:
```{.python filename="variables_more_complex.py"}
a_list = ["first element of list", "second element of list"]
another_list = [1, 5, 3, 6]
a_dictionary = {
    "1st key": "1st value",
    "2nd key": "2nd value",
}
a_tuple = (1, 2, 3, 4, 6, 7)
a_set = {4, 2, 5, 3}
```


## Spaces

* Variables names **cannot have spaces**, if you add a space, the computer will read this as two separate variables:

```{.python filename="spaces.py"}
variable_a = "I am a variable"
variable b = "The added space will cause an error"
```
Syntax error:

        Cell In[1], line 2
            variable b = "The added space will cause an error"
                     ^
        SyntaxError: invalid syntax

## Double or single quotation marks?

* You will see people using 'single' and also "double" quotation marks. It does not matter which you chose, but be consistent. If you accidently mix pairs of quotation marks you will get strange errors.

```{.python filename="quotation_marks.py"}
variable_a = "All good here with two single qoutation marks"
variable_b = "I have the wrong matching qoutation marks'
variable_c = 'Single quotation marks'
```

* Suddenly `variable_c` is part of the string for `variable_b`


## Using both types of quotation marks

* You can embed quotation marks within each other

```{.python filename="quotation_marks.py"}
variable_a = "I want to highlight 'this' word"
variable_b = 'I would like to show you "this"'
```

## f-strings

* Useful to know

```{.python filename="f_string.py"}
age = 25
print(f"The patient's age is : { age }")
```

## Indentation {background-image="/media/steps-and-child.jpg" background-opacity="0.4"}

* Python is extremely sensitive to indentation. One extra space or tab in front of a line of code (an expression) and you will not hear the end of it in terms of errors or strange results. Indentation (in the form of `tabs`) of expressions shows the computer which previous expression it relates to.


## Indentation

```{.python filename="indentation.py" code-line-numbers="10"}
if drug_prescribed == True:
    if drug_given == True:
        record_drug_given = True
        print("Drug has been prescribed and given to the patient")
    else:
        print("Drug has been prescribed but not given")
else:
    print("Drug has not been prescribed")

print("Drug round complete!")
```

Output (if drug has been prescribed and given)

        Drug has been prescribed and given to the patient
        Drug round complete!


## Indentation

```{.python filename="indentation.py" code-line-numbers="10"}
if drug_prescribed == True:
    if drug_given == True:
        record_drug_given = True
        print("Drug has been prescribed and given to the patient")
    else:
        print("Drug has been prescribed but not given")
else:
    print("Drug has not been prescribed")

    print("Drug round complete!")
```


Output (if drug has been prescribed and given)

        Drug has been prescribed and given to the patient


## Naming conventions {.smaller}

* There are several naming conventions for programming languages. In python, conventions are:
    * Variables, functions and methods
        * `snake_case`
    * Constants
        * `CONSTANT_CASE`
    * Classes (a higher organisation method in python)
        * `CamelCase`
    * Modules (a file with python code inside)
        * `snake_case`
    * Packages (a collection of modules)
        * `lowercasepackagenames`

## Comments {.smaller}

* Comments are useful in explaining what code is supposed to do.
* They are essential for when you, and others, need to read your code later to problem solve or add to your code (10:1 reading to writing code ratio).
* Use them sparingly, as they can clutter code.
* Try and make variable and function names self explanatory.
* You can comment with the hastag or encapsulate with triple quotation marks:

```{.python filename="comments.py"}
# This is a single line comment
a_string = "a string"

""" Double quotation mark multiline comment
    Here is some more of the comment
"""
def i_am_a_function():
    return True

''' Single quotation mark multiline comment
    Here is some more of the comment
'''
def i_am_another_function():
    return True
```


## Comments {.smaller}

* You will also come across something called `docstrings`. These are basically comments associated with functions / methods and classes.
* You will see them associated with modules as well (at the top of files).

```{.python filename="docstrings.py"}
def i_am_function(args1, args2):
    """A concise title

    A description of the function.

    Args:
        args1: I am the first argument to the function.
        args2: I am the second argument to the function.
    Returns:
        x: the addition of the 2 provided arguments.
    """

    x = args1 + args2
    
    return x
```


## Basic operators {background-image="/media/blackboard-and-equations.jpg" background-opacity="0.2"}

* Operators manipulate and compare data (which are stored in variables). Operator types include:
    * Arithmetic: `+ - * /`
    * Comparison: `== > < `
    * Logical: `and or not`
    * Assignment: `= += -= *=`


## More advanced operators {background-image="/media/blackboard-and-equations.jpg" background-opacity="0.2"}

* These include:
    * Bitwise: `& | ^ << >>`
    * Membership: `in   not in`
    * Identity: `is   is not`

# <span style="font-size: smaller;">OK, so you can create variables, change them and compare them. What next?</span> {background-image="/media/river-close-up.jpg" background-opacity="0.4"}


## Control flow - if statements 

```{.python filename="if_statement.py"}
patient_allergy = "amoxicillin"

if patient_allergy == "amoxicillin":
    allergy_group = "penicillins"
elif patient_allergy == "tazocin":
    allergy_group = "penicillins"
else:
    allergy_group = "others"

print("Patient is allergic to", allergy_group)
```

Output

        Patient is allergic to penicillins


## Control flow - for loops
```{.python filename="for_loop.py"}
list_of_numbers = [1, 2, 3, 4, 5]

for number in list_of_numbers:
    print(number)
```

Output

        1
        2
        3
        4
        5


## Control flow - while loops
```{.python filename="while_loop.py"}
count = 1

while count <= 5:
    print(count)
    count += 1
```

Output

        1
        2
        3
        4
        5

## Functions (methods) {background-image="/media/box.jpg" background-opacity="0.4"}

* Blocks of reusable code that perform a specific task. 
* Help in organising code and making it more modular.
* Part of the `DRY` (`don't repeat yourself`) philosophy.
* A `method` is just a function, used within a class (a higher organisational entity in python).


## Functions (methods)

```{.python filename="functions.py"}
def name_of_function(argument_1, argument_2):
    a_variable = argument_1 + argument_2
    another_variable = "a return value"

    print (a_variable)

    return another_variable
```

## Other things to be aware of {.smaller}

* There are several other organisational practices in python, but we will leave these for another day.
* Just so you are aware, these are:
    * classes
    * modules
    * packages
* There are also:
    * Some fancy syntax practices
    * Reading inputs from the terminal
    * File handling
    * Object oriented programming

## Error Handling {background-image="/media/insect-on-leaf.jpg" background-opacity="0.3"}

* Error handling is one of the most important concepts to understand and manage well. You will be spending 25-50% of  your time `debugging`.
* `Debugging` is the practice of looking for bugs (errors in the code) and trying to fix them.
* When an error happens in python, an `exception` is raised. You then use the `traceback` to try and find the cause of the error.

## Error Handling

* If you know an error might happen at a set location, you can catch errors directly in your code: 

```{.python filename="functions.py"}
try:
    variable = 1 + "a"
except:
    print("I knew that you could not add an integer and a string!")
else:
    print("Somehow I did not get an error!")
```

Output

        I knew that you could not add an integer and a string!


## The Traceback

* At first, this looks like a very complicated output

<div class="terminal-border">
        Traceback (most recent call last):
            File "/User/a_user/code/error_in_code.py", line 28, in <module>
                print(fruit_prices.get_price("pear"))
            File "/User/a_user/code/error_in_code.py", line 21, in get_price
                return self._price(fruit)
            File "/User/a_user/code/error_in_code.py", line 24, in _price
                return self.prices[fruit]
        KeyError: 'pear'
</div>


## The Traceback

* When reading a Traceback, alwas read from the last line upwards.

<div class="terminal-border">
        Traceback (most recent call last):
            File "/User/a_user/code/error_in_code.py", line 28, in <module>
                print(fruit_prices.get_price("pear"))
            File "/User/a_user/code/error_in_code.py", line 21, in get_price
                return self._price(fruit)
            File "/User/a_user/code/error_in_code.py", line 24, in _price
                return self.prices[fruit]
        ==> KeyError: 'pear' <==
</div>


## Compare the Traceback to the code

* Compare against the code

```{.python filename="functions.py" code-line-numbers="3,4,15"}
class FruitPrices:
    def __init__(self):
        # 'pear' key does not exist!
        self.prices = {"apple": 1.55, "banana": 2.44}

    def get_price(self, fruit):
        return self._price(fruit)

    def _price(self, fruit):
        return self.prices[fruit]


fruit_prices = FruitPrices()

print(fruit_prices.get_price("pear"))
```

## You got all that? {background-image="/media/coding.jpg" background-opacity="0.3"}

* Now it is your turn.
* Time for some hands on coding in `Lesson 2`.


## Computers are pedantic!

* **Remember** that computers think in `True` and `False`, e.g. `1` and `0`s. They are literal thinkers. 
* Even one character being out of place can break an entire code base. So watch out for that `unpaired quotation mark`, look out for that `space` that should not be there, and make sure you `match your indentations to your if statements`.
* Now go have some fun in your tutor groups with hands-on coding and debugging.
