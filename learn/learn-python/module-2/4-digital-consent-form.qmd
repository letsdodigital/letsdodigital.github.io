---
title: "Building a digital consent form"
subtitle: "Module 2"
author: "{{< var author >}}"
format: revealjs
logo: /media/ldd-logo.png
css: /slides.css
title-slide-attributes:
    data-background-image: /media/signature-on-form.jpg
    data-background-opacity: "0.4"
---

# Lesson 2 - Let's build a digital consent app


## Eager to get started?

* Don't worry, we will get you coding soon.
* However, it is probably a good idea to make sure you are familiar with all of the coding concepts you need to build a `digital consent form`.


## So what are we going to build exactly?

* A web based digital healthcare app.
* This needs both a frontend and a backend.
    * Frontend - what you see and interact with.
    * Backend - the brains (in most cases) and data storage of your app.


## What is a web browser?

* You highly likely use these every day (Explorer, Chrome, Safari).
* A web browser is a software program that allows a user to locate, access, and display web pages.
* The main languages used in creating the raw webpage are HTML and javascript. 
* You can use frameworks in other languages to then create these "raw" webpages. In our case a python scripting language framework called `streamlit`.


## We are going to cheat

* As we do not have time to build both the front and backend, we have created a cloud database (specifically `suprabase`) for you to connect to.
* The "brains" and frontend delivery will be managed by the `streamlit` server that you will be building.
* A server is basically a computer program that provides you with a web page to interact with.


## You need to have VS code installed

* Hopefully you have already installed the `VS Code IDE` on your own personal machines. 
* You have 10 minutes to try and install VS code now. If no luck, then we will get you to use `Codespace`.


## We need some extensions

* Python
* Black


## <span class="hide-title">Python extension</span>

![](/media/python-extension-vs-code.png){.centre-full-image}


## <span class="hide-title">Black formatter extension</span>

![](/media/black-formatter-vs-code.png){.centre-full-image}


## What is a library

* You will be using different libraries in this build.
* A library is basically a collection of code that provides set functionality.
* You need to `import` libraries to use them.


## What is an API

* An application process interface (API) is a means for computer programs, on the same computer or over networks or even the internet to communicate together.


## Data in a database

* Much like a spreadsheet, data is stored in a database in `tables`
* Each row in the database is called a `record`
* You `query` the database to get data from it
* Queries in streamlit get all data. Really should only get the data you need


## Python related material 1

* what is a function, how to write one. (Anatomy of a function)
* List comprehension, how to read and write them
* What is state
* Return nothing = `return`
* global variables

## Python related material 2

* Anatomy of the for loop. Loop variable. The use of `else` with for loops. `breaks`
* Don't forget indentation and colons `:`
* `all` statement
* Initialising variables

## Have the slides on hand

* Make sure you have the slides on hand - `https://letsdodigital.org/learn/learn-python/module-2/`
* You will likely need them as you build your digital consent form.
* Recommend doing small changes to code saving, and checking what happens in the browser

## Ask

* Please please please ask questions of your tutor. That is why they are here.

`There is no such thing as a stupid question, only a question left unanswered`

## Streamlit

* As said, we will be using a python web app framework called `Streamlit` for the frontend.
* Frameworks are great, as someone else has done most of the heavy coding to make it easier for you to carry out a task (in this case building a web app).

![](/media/streamlit.png){fig-align="center"}


## Module import

`Direct import`

```{.python filename="libraries_1.py"}
import streamlit
```

or as an `alias`

```{.python filename="libraries_2.py"}
import streamlit as st
```


## Who is running what?

```{.python filename="main.py"}
if __name__ == "__main__":
    main()
```

* Checks if the current file is being run as an imported library or directly


## Streamlit methods

```{.python filename="streamlit methods.py" code-line-numbers="4,8,11"}
import streamlit as st

# Writes text to the browser
st.write("Text to write to browser")

# Creates a text input field
# `step` is the increment for + - buttons
st.number_input("Label of input box", step=1) 

# Creates a select box
st.selectbox("Label for selectbox", ["first choice","second choice"])

# Show an error message
st.error("I am an error message")
```

## Field labels, keys, on_change, lists for selectbox

* Field labels, keys, on_change, lists for selectbox

## magicEnabled = false

* We have turned off a feature in Streamlit that shows all of your code in the browser using:

```{.python filename=".streamlit/config.toml" code-line-numbers="2"}
[runner]
magicEnabled = false
```

Otherwise, the browser will be a little messy with all of your code visible.

\
(See .streamlit/config.toml file if interested)


## Stopping a running program

CTRL - C

or 

CMD - C


## Warning! {background-image="/media/glowing-red-cone.jpg" background-opacity="0.3"}

* You are building an educational program. This is NOT to be used with real patients!


## Nuances of streamlit

* When you update the code and save, click "Always rerun" (top right) in the browser to always refresh on code change.
* Sometimes you need to refresh the browser to get certain codes changes to work
* Streamlit.io reruns the whole script whenever you interact with the browser (eg click something, select something, type something, press a button)
* Why the text field and selectbox outside of the form. Because Streamlit.io does not allow for dynamic update within forms before submitting


## Linting / formatting

* You may notice strange line dropping in VScode. This is the Black formatter making your code conform to standards when you save.


## Where to start

* Click inside your terminal window
* Go to:

```{.bash}
$ cd programming_in_health_care/module_2/lesson_2
```

## Install libraries

```{.bash}
$ pip install streamlit
```

and

```{.bash}
$ pip install st_supabase_connection
```

## And then run

* And then run:

```{.bash}
$ streamlit run exercise_1.py
```


## This will run

```{.python filename="lesson_2.py"}
def main():
    st.title("Hello")
    st.text("Hello World!")

    return


if __name__ == "__main__":
    main()
```

And...


## Start the browser

Picture of browser


## Who is running what?

```{.python filename="main.py"}
if __name__ == "__main__":
    main()
```

* Checks if the current file is being run as an imported library or directly


## Altering the command to run

* Use the &#8592; and &#8594; arrows to move the cursor on the terminal line (the mouse does not allow you to move the cursor). Then make any corrections with backspace and keystrokes as needed.
* For example to change

```{.bash}
$ streamlit run exercise_1.py
```

to

```{.bash}
$ streamlit run exercise_2.py
```


# Pit stop

* Half way through
* How is it going? 
* What are people getting stuck on?


# Now go!

* Go join your breakout rooms again
* Ask away
* You will find it frustrating when code does not work straight away. However this is how you learn. Try writing code in different ways to see if you can get it to work
* Ask!
* Look up material in the slides
* Worse case scenario, look at the answers, which are basically in the following exercise (but keep this cheat to last).

```{=html}
<div class="bottom-right">
    <a href="https://letsdodigital.org/learn/learn-python/module-2/5-pit-stop.html" style="color: lightgrey;">Pit stop</a>
</div>
```